version: '3.8'

services:
  postgres:
    image: postgres:13
    container_name: camunda-postgres
    environment:
      POSTGRES_DB: camunda
      POSTGRES_USER: camunda
      POSTGRES_PASSWORD: camunda
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U camunda"]
      interval: 30s
      timeout: 10s
      retries: 5

  camunda:
    image: camunda/camunda-bpm-platform:run-latest
    container_name: camunda-platform
    environment:
      DB_DRIVER: org.postgresql.Driver
      DB_URL: jdbc:postgresql://postgres:5432/camunda
      DB_USERNAME: camunda
      DB_PASSWORD: camunda
      WAIT_FOR: postgres:5432
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - camunda_data:/camunda/configuration

  # Development middleware with hot reload
  middleware-dev:
    build:
      context: ./middleware
      dockerfile: Dockerfile.dev
    container_name: eligibility-middleware-dev
    environment:
      NODE_ENV: development
      MIDDLEWARE_PORT: 3000
      CAMUNDA_BASE_URL: http://camunda:8080/engine-rest
      DATA_API_URL: http://data-api:4000
      API_BASE_URL: ${API_BASE_URL:-http://localhost:3000}
    ports:
      - "3000:3000"
    depends_on:
      - camunda
      - data-api
    volumes:
      # Mount source code for hot reload
      - ./middleware/src:/app/src:ro
      - ./middleware/package.json:/app/package.json:ro
      - ./middleware/tsconfig.json:/app/tsconfig.json:ro
      - /app/node_modules  # Anonymous volume to prevent overwriting node_modules
    env_file:
      - .env

  data-api:
    build:
      context: ./data
      dockerfile: Dockerfile
    container_name: data-api
    environment:
      NODE_ENV: development
      PORT: 4000
    ports:
      - "4000:4000"
    volumes:
      - ./data:/app
      - /app/node_modules

volumes:
  postgres_data:
  camunda_data:
